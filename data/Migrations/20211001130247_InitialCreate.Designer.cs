// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data.Concrete;

namespace data.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20211001130247_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("entity.About", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("programmer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("About");
                });

            modelBuilder.Entity("entity.Author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.Property<string>("job")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("entity.Blog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tagid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Tagid");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("entity.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Blogid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("avatar")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("message")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Blogid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("entity.Music", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("entity.Social", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Social");
                });

            modelBuilder.Entity("entity.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("color")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("entity.Blog", b =>
                {
                    b.HasOne("entity.Tag", null)
                        .WithMany("blogList")
                        .HasForeignKey("Tagid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("entity.Comment", b =>
                {
                    b.HasOne("entity.Blog", null)
                        .WithMany("Comments")
                        .HasForeignKey("Blogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("entity.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("entity.Tag", b =>
                {
                    b.Navigation("blogList");
                });
#pragma warning restore 612, 618
        }
    }
}
